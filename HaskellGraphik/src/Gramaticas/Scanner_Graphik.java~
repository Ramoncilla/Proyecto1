/* The following code was generated by JFlex 1.6.1 */


/* ------------------------==: CODIGO DE USUARIO :==--------------------------*/
package Gramaticas;
    
import Gramaticas.Simbolos;
import java_cup.runtime.Symbol;
import java.io.*;
import java.lang.*;
import java.util.ArrayList;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Alina/Documents/NetBeansProjects/HaskellGraphik/src/Gramaticas/Analizador_Lexico.jflex</tt>
 */
public class Scanner_Graphik implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\11\1\66\1\65\1\65\22\0\1\65\1\20\1\4"+
    "\1\7\2\0\1\17\1\5\1\57\1\60\1\12\1\14\1\63\1\15"+
    "\1\2\1\10\12\1\1\64\1\0\1\21\1\23\1\22\1\54\1\0"+
    "\1\25\1\41\1\34\1\33\1\27\1\53\1\44\1\46\1\36\1\6"+
    "\1\50\1\40\1\37\1\30\1\32\1\42\1\6\1\26\1\52\1\31"+
    "\1\43\1\24\4\6\1\61\1\0\1\62\1\13\1\45\1\0\1\25"+
    "\1\41\1\34\1\33\1\27\1\53\1\44\1\46\1\36\1\6\1\50"+
    "\1\40\1\37\1\30\1\32\1\42\1\6\1\26\1\52\1\31\1\43"+
    "\1\24\4\6\1\55\1\16\1\56\7\0\1\66\75\0\1\3\154\0"+
    "\2\35\115\0\1\51\u1e98\0\1\3\17\0\1\66\1\66\u0100\0\1\47"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\1\1\13\1\14\1\15"+
    "\1\16\7\4\1\1\6\4\1\1\2\4\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\0"+
    "\1\30\1\0\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\13\4\2\0\2\4\1\0"+
    "\7\4\1\0\1\43\1\4\1\43\1\4\1\44\1\45"+
    "\1\31\1\0\1\46\2\4\2\47\11\4\1\0\3\4"+
    "\3\0\3\4\1\0\5\4\1\0\3\4\2\0\3\4"+
    "\1\31\2\0\6\4\1\0\5\4\2\50\2\4\3\0"+
    "\3\4\1\0\2\4\1\51\1\52\2\4\1\0\3\4"+
    "\1\0\1\53\1\4\1\53\1\0\1\4\1\54\2\55"+
    "\3\4\1\0\1\4\2\56\1\0\2\4\1\57\2\4"+
    "\1\0\2\4\3\0\3\4\1\0\4\4\1\0\1\4"+
    "\1\0\2\4\1\0\1\4\2\60\2\4\1\61\1\0"+
    "\1\4\1\0\5\4\1\62\1\0\2\4\1\0\1\63"+
    "\1\0\1\4\1\63\1\4\1\0\1\4\1\64\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\1\65\1\0\1\4\2\66\1\67\3\4"+
    "\1\0\1\4\1\70\2\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\0\1\4\2\71\2\72\1\0\1\4\1\0"+
    "\2\4\2\73\2\4\1\74\1\0\1\4\1\0\1\75"+
    "\1\4\1\75\2\76\2\77\1\0\1\4\2\100\1\0"+
    "\1\4\1\0\1\4\1\101\1\102\1\103\2\104\1\0"+
    "\1\4\2\105\1\0\1\4\2\106\2\107\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\2\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\67\0\245\0\334\0\u0113\0\u014a"+
    "\0\67\0\u0181\0\67\0\67\0\u01b8\0\u01ef\0\u0226\0\u025d"+
    "\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\u0717\0\334"+
    "\0\67\0\u074e\0\u0785\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0717\0\67\0\u0dc0\0\u0df7\0\245\0\u0e2e\0\u0e65\0\67"+
    "\0\245\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e"+
    "\0\u18b5\0\u18ec\0\67\0\245\0\u1923\0\u195a\0\u1991\0\u19c8"+
    "\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\245"+
    "\0\245\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca"+
    "\0\67\0\u1d01\0\245\0\u1d38\0\u1d6f\0\67\0\67\0\245"+
    "\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\67\0\245\0\u1eb9"+
    "\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071"+
    "\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229"+
    "\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1"+
    "\0\u2418\0\u244f\0\67\0\245\0\u2486\0\u24bd\0\245\0\u24f4"+
    "\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\245"+
    "\0\u26ac\0\u26e3\0\u271a\0\u2751\0\67\0\u2788\0\u27bf\0\245"+
    "\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977"+
    "\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f"+
    "\0\245\0\u2b66\0\u2b9d\0\67\0\245\0\245\0\u2bd4\0\u2c0b"+
    "\0\u2c42\0\u2c79\0\u2cb0\0\245\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c"+
    "\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\67"+
    "\0\245\0\67\0\245\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020"+
    "\0\67\0\245\0\u3057\0\u308e\0\245\0\u30c5\0\u30fc\0\u3133"+
    "\0\67\0\u316a\0\245\0\67\0\245\0\67\0\245\0\u31a1"+
    "\0\u31d8\0\67\0\245\0\u320f\0\u3246\0\u327d\0\u32b4\0\245"+
    "\0\245\0\245\0\67\0\245\0\u32eb\0\u3322\0\67\0\245"+
    "\0\u3359\0\u3390\0\67\0\245\0\67\0\245\0\u33c7\0\u33fe"+
    "\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511\0\u3548\0\u357f\0\u35b6"+
    "\0\u35ed\0\u3624\0\u365b\0\u3692\0\67\0\245";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\5\1\31\1\5\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\5\1\42\2\5\1\2\1\5"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\12\71\0\1\3\1\57"+
    "\65\0\1\5\1\0\1\5\2\0\1\5\15\0\11\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\13\0\4\60"+
    "\1\61\62\60\1\0\1\62\4\0\1\62\15\0\11\62"+
    "\1\0\7\62\1\0\1\62\1\0\1\62\1\0\2\62"+
    "\23\0\1\63\67\0\1\12\53\0\1\12\15\0\1\64"+
    "\67\0\1\65\67\0\1\66\66\0\1\67\1\70\72\0"+
    "\1\71\66\0\1\72\66\0\1\73\66\0\1\74\44\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\1\5\1\75"+
    "\1\5\1\76\5\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\11\5\1\0\2\5\1\77\6\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\3\5\1\100\5\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\4\5\1\101\4\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\3\5\1\102\5\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\1\5\1\103\1\5\1\104\2\5\1\105\2\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\1\5\1\106\4\5\1\107"+
    "\2\5\1\0\11\5\1\0\1\5\1\0\2\5\43\0"+
    "\1\110\6\0\1\111\30\0\1\5\1\0\1\5\2\0"+
    "\1\5\15\0\4\5\1\112\4\5\1\0\1\5\1\113"+
    "\7\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\11\5\1\114\1\115\10\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\11\5\1\0\2\5\1\116\6\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\6\5\1\117\2\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\1\5\1\120\1\121\6\5\1\0"+
    "\5\5\1\122\3\5\1\0\1\5\1\0\2\5\14\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\2\5\1\123"+
    "\6\5\1\0\11\5\1\0\1\5\1\0\2\5\42\0"+
    "\1\124\5\0\2\125\31\0\1\5\1\0\1\5\2\0"+
    "\1\5\15\0\3\5\1\126\5\5\1\125\1\127\10\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\1\5\1\130\7\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\131\72\0\1\132"+
    "\61\0\10\63\1\133\1\134\55\63\1\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\2\5\1\135\5\5\1\136"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\2\5\1\137\6\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\11\5\1\0\11\5"+
    "\1\0\1\5\1\140\1\141\1\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\5\5\1\142\3\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\5\5\1\143\3\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\2\5\1\144\6\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\5\5\1\145\3\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\10\5\1\146\1\0\11\5"+
    "\1\0\1\5\1\0\1\5\1\147\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\4\5\1\150\4\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\2\5\1\151\4\5\1\152"+
    "\1\5\1\0\11\5\1\0\1\5\1\153\1\154\1\5"+
    "\14\0\1\5\1\0\1\5\2\0\1\5\15\0\4\5"+
    "\1\155\4\5\1\0\2\5\1\156\6\5\1\0\1\5"+
    "\1\0\2\5\47\0\1\157\2\160\72\0\1\161\25\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\10\5\1\162"+
    "\1\160\1\163\10\5\1\0\1\5\1\0\2\5\14\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\11\5\1\0"+
    "\4\5\1\164\4\5\1\0\1\5\1\0\2\5\42\0"+
    "\1\165\40\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\3\5\1\166\5\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\1\5\1\167\7\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\6\5\1\170\2\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\2\5\1\171\6\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\6\5\1\172\2\5\1\173\1\174\10\5\1\0\1\5"+
    "\1\0\2\5\14\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\11\5\1\0\3\5\1\175\5\5\1\0\1\5"+
    "\1\0\2\5\14\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\1\5\1\176\7\5\1\0\11\5\1\0\1\5"+
    "\1\0\2\5\53\0\1\177\56\0\1\200\37\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\11\5\1\0\2\5"+
    "\1\201\6\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\4\5\1\202\4\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\11\5\1\0\2\5"+
    "\1\203\6\5\1\0\1\5\1\0\2\5\13\0\7\63"+
    "\1\204\1\133\1\134\55\63\10\134\1\205\56\134\1\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\11\5\1\206"+
    "\1\207\10\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\7\5\1\210\1\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\6\5\1\211\2\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\3\5\1\212\5\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\11\5\1\0\1\5"+
    "\1\213\7\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\6\5\1\214\2\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\11\5\1\215\1\216"+
    "\10\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\3\5\1\217\5\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\7\5\1\220\1\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\1\5\1\221\7\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\3\5\1\222\5\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\45\0\1\223\35\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\6\5\1\224"+
    "\2\5\1\0\11\5\1\0\1\5\1\0\2\5\14\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\5\5\1\225"+
    "\3\5\1\0\11\5\1\0\1\5\1\0\2\5\14\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\11\5\1\0"+
    "\5\5\1\226\3\5\1\0\1\5\1\0\2\5\53\0"+
    "\1\227\62\0\1\230\64\0\1\231\35\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\11\5\1\0\2\5\1\232"+
    "\6\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\10\5\1\233\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\6\5\1\234\2\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\43\0\1\235\37\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\4\5\1\236\4\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\11\5\1\0\1\5"+
    "\1\237\7\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\11\5\1\0\2\5"+
    "\1\240\6\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\1\5\1\241\7\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\5\5\1\242\2\5"+
    "\1\243\1\0\11\5\1\0\1\5\1\0\2\5\37\0"+
    "\1\244\43\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\1\245\10\5\1\0\11\5\1\0\1\5\1\0\2\5"+
    "\14\0\1\5\1\0\1\5\2\0\1\5\15\0\11\5"+
    "\1\0\2\5\1\246\6\5\1\0\1\5\1\0\2\5"+
    "\14\0\1\5\1\0\1\5\2\0\1\5\15\0\11\5"+
    "\1\0\4\5\1\247\4\5\1\0\1\5\1\0\2\5"+
    "\42\0\1\250\71\0\1\251\35\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\3\5\1\252\5\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\6\5\1\253\2\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\11\5\1\0\11\5\1\0\1\5"+
    "\1\254\1\255\1\5\13\0\11\204\1\0\55\204\7\134"+
    "\1\256\1\205\56\134\32\0\1\257\35\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\6\5\1\260\2\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\1\5\1\261\7\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\2\5\1\262\6\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\2\5\1\263\6\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\11\5\1\264\1\265\10\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\11\5\1\0\11\5\1\0\1\5"+
    "\1\266\1\267\1\5\52\0\1\270\30\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\11\5\1\0\1\5\1\271"+
    "\7\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\10\5\1\272\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\3\5\1\273\5\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\10\5\1\274\1\0\11\5\1\0"+
    "\1\5\1\0\2\5\14\0\1\5\1\0\1\5\2\0"+
    "\1\5\15\0\4\5\1\275\4\5\1\0\11\5\1\0"+
    "\1\5\1\0\2\5\14\0\1\5\1\0\1\5\2\0"+
    "\1\5\15\0\11\5\1\276\1\277\10\5\1\0\1\5"+
    "\1\0\2\5\14\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\11\5\1\0\1\5\1\300\7\5\1\0\1\5"+
    "\1\0\2\5\56\0\1\301\60\0\2\302\56\0\1\303"+
    "\41\0\1\5\1\0\1\5\2\0\1\5\15\0\11\5"+
    "\1\0\5\5\1\304\3\5\1\0\1\5\1\0\2\5"+
    "\14\0\1\5\1\0\1\5\2\0\1\5\15\0\11\5"+
    "\1\302\1\305\10\5\1\0\1\5\1\0\2\5\14\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\2\5\1\306"+
    "\6\5\1\0\11\5\1\0\1\5\1\0\2\5\44\0"+
    "\1\307\36\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\5\5\1\310\3\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\1\5\1\311\7\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\3\5\1\312\5\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\3\5\1\313\5\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\40\0\1\314\42\0\1\5\1\0\1\5\2\0"+
    "\1\5\15\0\1\5\1\315\7\5\1\0\11\5\1\0"+
    "\1\5\1\0\2\5\14\0\1\5\1\0\1\5\2\0"+
    "\1\5\15\0\11\5\1\316\1\317\10\5\1\0\1\5"+
    "\1\0\2\5\14\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\11\5\1\0\10\5\1\320\1\0\1\5\1\0"+
    "\2\5\47\0\1\321\33\0\1\5\1\0\1\5\2\0"+
    "\1\5\15\0\10\5\1\322\1\0\11\5\1\0\1\5"+
    "\1\0\2\5\45\0\1\323\35\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\6\5\1\324\2\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\7\5\1\325\1\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\4\5\1\326\4\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\6\5\1\327\2\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\43\0\1\330\37\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\4\5\1\331\4\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\40\0\1\332"+
    "\42\0\1\5\1\0\1\5\2\0\1\5\15\0\1\5"+
    "\1\333\7\5\1\0\11\5\1\0\1\5\1\0\2\5"+
    "\14\0\1\5\1\0\1\5\2\0\1\5\15\0\5\5"+
    "\1\334\3\5\1\0\11\5\1\0\1\5\1\0\2\5"+
    "\14\0\1\5\1\0\1\5\2\0\1\5\15\0\5\5"+
    "\1\335\2\5\1\336\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\5\5\1\337\3\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\1\5\1\340\7\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\43\0\1\341\37\0\1\5\1\0\1\5\2\0"+
    "\1\5\15\0\4\5\1\342\4\5\1\0\11\5\1\0"+
    "\1\5\1\0\2\5\14\0\1\5\1\0\1\5\2\0"+
    "\1\5\15\0\4\5\1\343\4\5\1\0\11\5\1\0"+
    "\1\5\1\0\2\5\50\0\2\344\62\0\1\345\65\0"+
    "\1\346\36\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\11\5\1\344\1\347\10\5\1\0\1\5\1\0\2\5"+
    "\14\0\1\5\1\0\1\5\2\0\1\5\15\0\6\5"+
    "\1\350\2\5\1\0\11\5\1\0\1\5\1\0\2\5"+
    "\14\0\1\5\1\0\1\5\2\0\1\5\15\0\5\5"+
    "\1\351\3\5\1\0\11\5\1\0\1\5\1\0\2\5"+
    "\41\0\1\352\41\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\2\5\1\353\6\5\1\0\11\5\1\0\1\5"+
    "\1\0\2\5\14\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\2\5\1\354\6\5\1\0\11\5\1\0\1\5"+
    "\1\0\2\5\14\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\11\5\1\0\6\5\1\355\2\5\1\0\1\5"+
    "\1\0\2\5\14\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\11\5\1\0\11\5\1\0\1\5\1\356\1\357"+
    "\1\5\46\0\1\360\34\0\1\5\1\0\1\5\2\0"+
    "\1\5\15\0\7\5\1\361\1\5\1\0\11\5\1\0"+
    "\1\5\1\0\2\5\47\0\1\362\33\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\10\5\1\363\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\11\5\1\364\1\365\10\5\1\0"+
    "\1\5\1\0\2\5\47\0\1\366\33\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\10\5\1\367\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\3\5\1\370\5\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\6\5\1\371\2\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\40\0\1\372\42\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\1\5\1\373\7\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\53\0\1\374"+
    "\27\0\1\5\1\0\1\5\2\0\1\5\15\0\11\5"+
    "\1\0\2\5\1\375\6\5\1\0\1\5\1\0\2\5"+
    "\14\0\1\5\1\0\1\5\2\0\1\5\15\0\6\5"+
    "\1\376\2\5\1\0\11\5\1\0\1\5\1\0\2\5"+
    "\14\0\1\5\1\0\1\5\2\0\1\5\15\0\6\5"+
    "\1\377\2\5\1\0\11\5\1\0\1\5\1\0\2\5"+
    "\14\0\1\5\1\0\1\5\2\0\1\5\15\0\1\5"+
    "\1\u0100\7\5\1\0\11\5\1\0\1\5\1\0\2\5"+
    "\14\0\1\5\1\0\1\5\2\0\1\5\15\0\3\5"+
    "\1\u0101\5\5\1\0\11\5\1\0\1\5\1\0\2\5"+
    "\56\0\1\u0102\24\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\11\5\1\0\5\5\1\u0103\3\5\1\0\1\5"+
    "\1\0\2\5\14\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\1\5\1\u0104\7\5\1\0\11\5\1\0\1\5"+
    "\1\0\2\5\41\0\1\u0105\65\0\1\u0106\42\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\2\5\1\u0107\6\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\1\5\1\u0108\7\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\40\0\1\u0109"+
    "\42\0\1\5\1\0\1\5\2\0\1\5\15\0\1\5"+
    "\1\u010a\7\5\1\0\11\5\1\0\1\5\1\0\2\5"+
    "\14\0\1\5\1\0\1\5\2\0\1\5\15\0\11\5"+
    "\1\0\10\5\1\u010b\1\0\1\5\1\0\2\5\14\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\11\5\1\u010c"+
    "\1\u010d\10\5\1\0\1\5\1\0\2\5\40\0\1\u010e"+
    "\42\0\1\5\1\0\1\5\2\0\1\5\15\0\1\5"+
    "\1\u010f\7\5\1\0\11\5\1\0\1\5\1\0\2\5"+
    "\45\0\1\u0110\35\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\6\5\1\u0111\2\5\1\0\11\5\1\0\1\5"+
    "\1\0\2\5\45\0\1\u0112\35\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\6\5\1\u0113\2\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\62\0\2\u0114\17\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\11\5\1\0\11\5"+
    "\1\u0114\1\u0115\1\0\2\5\50\0\2\u0116\31\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\11\5\1\u0116\1\u0117"+
    "\10\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\2\5\1\u0118\6\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\41\0\1\u0119\41\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\2\5\1\u011a"+
    "\6\5\1\0\11\5\1\0\1\5\1\0\2\5\14\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\7\5\1\u011b"+
    "\1\5\1\0\11\5\1\0\1\5\1\0\2\5\14\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\7\5\1\u011c"+
    "\1\5\1\0\11\5\1\0\1\5\1\0\2\5\14\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\2\5\1\u011d"+
    "\6\5\1\0\11\5\1\0\1\5\1\0\2\5\40\0"+
    "\1\u011e\42\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\1\5\1\u011f\7\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\60\0\1\u0120\47\0\1\u0121\41\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\11\5\1\0\7\5\1\u0122"+
    "\1\5\1\0\1\5\1\0\2\5\14\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\2\5\1\u0123\6\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\64\0\2\u0124\15\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\11\5\1\0"+
    "\11\5\1\0\1\5\1\u0124\1\u0125\1\5\14\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\11\5\1\0\11\5"+
    "\1\u0126\1\u0127\1\0\2\5\46\0\1\u0128\34\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\7\5\1\u0129\1\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\41\0\1\u012a"+
    "\41\0\1\5\1\0\1\5\2\0\1\5\15\0\2\5"+
    "\1\u012b\6\5\1\0\11\5\1\0\1\5\1\0\2\5"+
    "\40\0\1\u012c\42\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\1\5\1\u012d\7\5\1\0\11\5\1\0\1\5"+
    "\1\0\2\5\45\0\1\u012e\35\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\6\5\1\u012f\2\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\6\5\1\u0130\2\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\6\5\1\u0131\2\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\14\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\1\5\1\u0132\7\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\41\0\1\u0133\41\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\2\5\1\u0134\6\5"+
    "\1\0\11\5\1\0\1\5\1\0\2\5\61\0\1\u0135"+
    "\21\0\1\5\1\0\1\5\2\0\1\5\15\0\11\5"+
    "\1\0\10\5\1\u0136\1\0\1\5\1\0\2\5\45\0"+
    "\1\u0137\35\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\6\5\1\u0138\2\5\1\0\11\5\1\0\1\5\1\0"+
    "\2\5\41\0\1\u0139\41\0\1\5\1\0\1\5\2\0"+
    "\1\5\15\0\2\5\1\u013a\6\5\1\0\11\5\1\0"+
    "\1\5\1\0\2\5\43\0\1\u013b\37\0\1\5\1\0"+
    "\1\5\2\0\1\5\15\0\4\5\1\u013c\4\5\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\62\0\2\u013d\17\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\11\5\1\0"+
    "\11\5\1\u013d\1\u013e\1\0\2\5\60\0\1\u013f\22\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\11\5\1\0"+
    "\7\5\1\u0140\1\5\1\0\1\5\1\0\2\5\66\0"+
    "\1\u0141\14\0\1\5\1\0\1\5\2\0\1\5\15\0"+
    "\11\5\1\0\11\5\1\0\1\5\1\0\1\5\1\u0142"+
    "\56\0\1\u0143\24\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\11\5\1\0\5\5\1\u0144\3\5\1\0\1\5"+
    "\1\0\2\5\43\0\1\u0145\37\0\1\5\1\0\1\5"+
    "\2\0\1\5\15\0\4\5\1\u0146\4\5\1\0\11\5"+
    "\1\0\1\5\1\0\2\5\47\0\1\u0147\33\0\1\5"+
    "\1\0\1\5\2\0\1\5\15\0\10\5\1\u0148\1\0"+
    "\11\5\1\0\1\5\1\0\2\5\50\0\2\u0149\31\0"+
    "\1\5\1\0\1\5\2\0\1\5\15\0\11\5\1\u0149"+
    "\1\u014a\10\5\1\0\1\5\1\0\2\5\45\0\1\u014b"+
    "\35\0\1\5\1\0\1\5\2\0\1\5\15\0\6\5"+
    "\1\u014c\2\5\1\0\11\5\1\0\1\5\1\0\2\5"+
    "\43\0\1\u014d\37\0\1\5\1\0\1\5\2\0\1\5"+
    "\15\0\4\5\1\u014e\4\5\1\0\11\5\1\0\1\5"+
    "\1\0\2\5\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14025];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\4\1\1\11\1\1\2\11"+
    "\31\1\11\11\2\0\1\11\1\0\1\1\11\11\13\1"+
    "\2\0\2\1\1\0\7\1\1\0\5\1\1\11\1\1"+
    "\1\0\3\1\1\11\12\1\1\0\3\1\3\0\3\1"+
    "\1\0\5\1\1\0\3\1\2\0\4\1\2\0\6\1"+
    "\1\0\5\1\1\11\3\1\3\0\3\1\1\0\6\1"+
    "\1\0\3\1\1\0\1\11\2\1\1\0\1\1\2\11"+
    "\4\1\1\0\1\1\1\11\1\1\1\0\5\1\1\0"+
    "\2\1\3\0\3\1\1\0\4\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\11\4\1\1\0\1\1\1\0"+
    "\6\1\1\0\2\1\1\0\1\11\1\0\3\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\11\5\1\1\0"+
    "\2\1\2\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\2\1\1\11\4\1\1\0\1\1\1\0\1\11\2\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\4\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static String cadena;

/* ------------------------==: METODO DE ERROR LEXICO :==---------------------*/
    private void ErrorScan(int linea, int columna, String valor) {
        System.out.println("Error Lexico Iden: " + valor + ", " + linea + ", " + columna);
        cadena += "<tr>"
                + "<td><center><b>" + valor + "</b></center></td>"
                + "<td><center><b>" + linea + "</b></center></td>"
                + "<td><center><b>" + columna + "</b></center></td>"
                + "</tr>";
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner_Graphik(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { ErrorScan(yyline,yychar,yytext());
            }
          case 73: break;
          case 2: 
            { System.out.println(yytext());                return new Symbol (Simbolos.numero, yyline+1,yychar+1, new String (yytext()));
            }
          case 74: break;
          case 3: 
            { System.out.println("punto");             return new Symbol (Simbolos.punto, yyline+1,yychar+1, new String (yytext()));
            }
          case 75: break;
          case 4: 
            { System.out.println(yytext());                return new Symbol (Simbolos.id, yyline+1,yychar+1, new String (yytext()));
            }
          case 76: break;
          case 5: 
            { System.out.println("Divi");               return new Symbol (Simbolos.division, yyline+1,yychar+1, new String (yytext()));
            }
          case 77: break;
          case 6: 
            { /* Se ignoran */
            }
          case 78: break;
          case 7: 
            { System.out.println("Multiplicacion");              return new Symbol (Simbolos.multiplicacion, yyline+1,yychar+1, new String (yytext()));
            }
          case 79: break;
          case 8: 
            { System.out.println("Potencia");              return new Symbol (Simbolos.potencia, yyline+1,yychar+1, new String (yytext()));
            }
          case 80: break;
          case 9: 
            { System.out.println("Suma");               return new Symbol (Simbolos.suma, yyline+1,yychar+1, new String (yytext()));
            }
          case 81: break;
          case 10: 
            { System.out.println("Resta");              return new Symbol (Simbolos.resta, yyline+1,yychar+1, new String (yytext()));
            }
          case 82: break;
          case 11: 
            { System.out.println("not");                return new Symbol (Simbolos.not, yyline+1,yychar+1, new String (yytext()));
            }
          case 83: break;
          case 12: 
            { System.out.println("menor");              return new Symbol (Simbolos.menor, yyline+1,yychar+1, new String (yytext()));
            }
          case 84: break;
          case 13: 
            { System.out.println("mayor");              return new Symbol (Simbolos.mayor, yyline+1,yychar+1, new String (yytext()));
            }
          case 85: break;
          case 14: 
            { System.out.println("igual");              return new Symbol (Simbolos.igual, yyline+1,yychar+1, new String (yytext()));
            }
          case 86: break;
          case 15: 
            { System.out.println("interrogacion");       return new Symbol (Simbolos.interrogacion, yyline+1,yychar+1, new String (yytext()));
            }
          case 87: break;
          case 16: 
            { System.out.println("Abre_Llave");         return new Symbol (Simbolos.abre_llave, yyline+1,yychar+1, new String (yytext()));
            }
          case 88: break;
          case 17: 
            { System.out.println("Cierra_Llave");       return new Symbol (Simbolos.cierra_llave, yyline+1,yychar+1, new String (yytext()));
            }
          case 89: break;
          case 18: 
            { System.out.println("abrePar");            return new Symbol (Simbolos.abre_par, yyline+1,yychar+1, new String (yytext()));
            }
          case 90: break;
          case 19: 
            { System.out.println("cierraPar");          return new Symbol (Simbolos.cierra_par, yyline+1,yychar+1, new String (yytext()));
            }
          case 91: break;
          case 20: 
            { System.out.println("abreCor");            return new Symbol (Simbolos.abre_cor, yyline+1,yychar+1, new String (yytext()));
            }
          case 92: break;
          case 21: 
            { System.out.println("cierraCor");          return new Symbol (Simbolos.cierra_cor, yyline+1,yychar+1, new String (yytext()));
            }
          case 93: break;
          case 22: 
            { System.out.println("coma");               return new Symbol (Simbolos.coma, yyline+1,yychar+1, new String (yytext()));
            }
          case 94: break;
          case 23: 
            { System.out.println("dospuntos");          return new Symbol (Simbolos.dos_puntos, yyline+1,yychar+1, new String (yytext()));
            }
          case 95: break;
          case 24: 
            { System.out.println(yytext());                return new Symbol (Simbolos.cadena, yyline+1,yychar+1, new String (yytext()));
            }
          case 96: break;
          case 25: 
            { System.out.println("Coment Simple");  /* se ignora*/
            }
          case 97: break;
          case 26: 
            { System.out.println("mas_mas");          ;return new Symbol (Simbolos.mas_mas, yyline+1,yychar+1, new String (yytext()));
            }
          case 98: break;
          case 27: 
            { System.out.println("menos_menos");            return new Symbol (Simbolos.menos_menos, yyline+1,yychar+1, new String (yytext()));
            }
          case 99: break;
          case 28: 
            { System.out.println("or");                 return new Symbol (Simbolos.or, yyline+1,yychar+1, new String (yytext()));
            }
          case 100: break;
          case 29: 
            { System.out.println("xor");                 return new Symbol (Simbolos.xor, yyline+1,yychar+1, new String (yytext()));
            }
          case 101: break;
          case 30: 
            { System.out.println("and");                return new Symbol (Simbolos.and, yyline+1,yychar+1, new String (yytext()));
            }
          case 102: break;
          case 31: 
            { System.out.println("No_Igual");           return new Symbol (Simbolos.no_igual, yyline+1,yychar+1, new String (yytext()));
            }
          case 103: break;
          case 32: 
            { System.out.println("Menor_Igual");        return new Symbol (Simbolos.menor_igual, yyline+1,yychar+1, new String (yytext()));
            }
          case 104: break;
          case 33: 
            { System.out.println("Mayor_Igual");        return new Symbol (Simbolos.mayor_igual, yyline+1,yychar+1, new String (yytext()));
            }
          case 105: break;
          case 34: 
            { System.out.println("igual_Igual");        return new Symbol (Simbolos.igual_igual, yyline+1,yychar+1, new String (yytext()));
            }
          case 106: break;
          case 35: 
            { System.out.println("si");              ;return new Symbol (Simbolos.si, yyline+1,yychar+1, new String (yytext()));
            }
          case 107: break;
          case 36: 
            { System.out.println(yytext());                return new Symbol (Simbolos.decimal, yyline+1,yychar+1, new String (yytext()));
            }
          case 108: break;
          case 37: 
            { System.out.println(yytext());                return new Symbol (Simbolos.caracter, yyline+1,yychar+1, new String (yytext()));
            }
          case 109: break;
          case 38: 
            { System.out.println("var");             ;return new Symbol (Simbolos.var, yyline+1,yychar+1, new String (yytext()));
            }
          case 110: break;
          case 39: 
            { System.out.println("als");              ;return new Symbol (Simbolos.als, yyline+1,yychar+1, new String (yytext()));
            }
          case 111: break;
          case 40: 
            { System.out.println("caso");            ;return new Symbol (Simbolos.caso, yyline+1,yychar+1, new String (yytext()));
            }
          case 112: break;
          case 41: 
            { System.out.println("bool");             ;return new Symbol (Simbolos.bool_t, yyline+1,yychar+1, new String (yytext()));
            }
          case 113: break;
          case 42: 
            { System.out.println("para");              ;return new Symbol (Simbolos.para, yyline+1,yychar+1, new String (yytext()));
            }
          case 114: break;
          case 43: 
            { System.out.println("sino");              ;return new Symbol (Simbolos.sino, yyline+1,yychar+1, new String (yytext()));
            }
          case 115: break;
          case 44: 
            { System.out.println("Coment Multi");   /* se ignora*/
            }
          case 116: break;
          case 45: 
            { System.out.println("vacio");             ;return new Symbol (Simbolos.vacio, yyline+1,yychar+1, new String (yytext()));
            }
          case 117: break;
          case 46: 
            { System.out.println("datos");              ;return new Symbol (Simbolos.datos, yyline+1,yychar+1, new String (yytext()));
            }
          case 118: break;
          case 47: 
            { System.out.println("donde");              ;return new Symbol (Simbolos.donde, yyline+1 ,yychar+1, new String (yytext()));
            }
          case 119: break;
          case 48: 
            { System.out.println("falso");              ;return new Symbol (Simbolos.falso, yyline+1,yychar+1, new String (yytext()));
            }
          case 120: break;
          case 49: 
            { System.out.println("entero");             ;return new Symbol (Simbolos.entero_t, yyline+1,yychar+1, new String (yytext()));
            }
          case 121: break;
          case 50: 
            { System.out.println("cadena");             ;return new Symbol (Simbolos.cadena_t, yyline+1,yychar+1, new String (yytext()));
            }
          case 122: break;
          case 51: 
            { System.out.println("inicio");            ;return new Symbol (Simbolos.inicio, yyline+1,yychar+1, new String (yytext()));
            }
          case 123: break;
          case 52: 
            { System.out.println("llamar");            ;return new Symbol (Simbolos.llamar, yyline+1,yychar+1, new String (yytext()));
            }
          case 124: break;
          case 53: 
            { System.out.println("retorno");              ;return new Symbol (Simbolos.retorno, yyline+1,yychar+1, new String (yytext()));
            }
          case 125: break;
          case 54: 
            { System.out.println("decimal");            ;return new Symbol (Simbolos.decimal_t, yyline+1,yychar+1, new String (yytext()));
            }
          case 126: break;
          case 55: 
            { System.out.println("defecto");              ;return new Symbol (Simbolos.defecto, yyline+1,yychar+1, new String (yytext()));
            }
          case 127: break;
          case 56: 
            { System.out.println("columna");            ;return new Symbol (Simbolos.columna, yyline+1,yychar+1, new String (yytext()));
            }
          case 128: break;
          case 57: 
            { System.out.println("privado");             ;return new Symbol (Simbolos.privado, yyline+1,yychar+1, new String (yytext()));
            }
          case 129: break;
          case 58: 
            { System.out.println("publico");             ;return new Symbol (Simbolos.publico, yyline+1,yychar+1, new String (yytext()));
            }
          case 130: break;
          case 59: 
            { System.out.println("terminar");            ;return new Symbol (Simbolos.terminar, yyline+1,yychar+1, new String (yytext()));
            }
          case 131: break;
          case 60: 
            { System.out.println("caracter");             ;return new Symbol (Simbolos.caracter_t, yyline+1,yychar+1, new String (yytext()));
            }
          case 132: break;
          case 61: 
            { System.out.println("importar");             ;return new Symbol (Simbolos.importar, yyline+1,yychar+1, new String (yytext()));
            }
          case 133: break;
          case 62: 
            { System.out.println("mientras");            ;return new Symbol (Simbolos.mientras, yyline+1,yychar+1, new String (yytext()));
            }
          case 134: break;
          case 63: 
            { System.out.println("llamarhk");              ;return new Symbol (Simbolos.llamarhk, yyline+1,yychar+1, new String (yytext()));
            }
          case 135: break;
          case 64: 
            { System.out.println("procesar");              ;return new Symbol (Simbolos.procesar, yyline+1,yychar+1, new String (yytext()));
            }
          case 136: break;
          case 65: 
            { System.out.println("true");              ;return new Symbol (Simbolos.verdadero, yyline+1,yychar+1, new String (yytext()));
            }
          case 137: break;
          case 66: 
            { System.out.println("dondetodo");              ;return new Symbol (Simbolos.dondetodo, yyline+1,yychar+1, new String (yytext()));
            }
          case 138: break;
          case 67: 
            { System.out.println("dondeCada");            ;return new Symbol (Simbolos.dondecada, yyline+1,yychar+1, new String (yytext()));
            }
          case 139: break;
          case 68: 
            { System.out.println("continuar");              ;return new Symbol (Simbolos.continuar, yyline+1,yychar+1, new String (yytext()));
            }
          case 140: break;
          case 69: 
            { System.out.println("protegido");           ;return new Symbol (Simbolos.protegido, yyline+1,yychar+1, new String (yytext()));
            }
          case 141: break;
          case 70: 
            { System.out.println("seleccion");              ;return new Symbol (Simbolos.seleccion, yyline+1,yychar+1, new String (yytext()));
            }
          case 142: break;
          case 71: 
            { System.out.println("incluirhk");             ;return new Symbol (Simbolos.incluir_hk, yyline+1,yychar+1, new String (yytext()));
            }
          case 143: break;
          case 72: 
            { System.out.println("graficar");              ;return new Symbol (Simbolos.graphikar_funcion, yyline+1,yychar+1, new String (yytext()));
            }
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
