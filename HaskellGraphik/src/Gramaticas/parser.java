
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 03 16:56:29 CST 2017
//----------------------------------------------------

package Gramaticas;

import Gramaticas.Simbolos;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 03 16:56:29 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\003\000\002\024" +
    "\011\000\002\024\007\000\002\025\006\000\002\026\005" +
    "\000\002\027\003\000\002\027\004\000\002\030\012\000" +
    "\002\030\010\000\002\030\011\000\002\030\011\000\002" +
    "\031\007\000\002\032\007\000\002\033\017\000\002\033" +
    "\015\000\002\034\004\000\002\035\004\000\002\036\005" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\021\003\000\002\021" +
    "\004\000\002\023\005\000\002\023\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\005\000\002\005\005\000\002\006\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\016\003\000\002\016\005\000\002\015" +
    "\005\000\002\015\005\000\002\017\005\000\002\017\006" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\006\000\002\007\006\000\002\007\005" +
    "\000\002\007\003\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\022\045\026\051\015\052\007\053\004\054" +
    "\016\055\022\056\021\077\020\001\002\000\004\102\210" +
    "\001\002\000\004\052\204\001\002\000\032\002\uffed\045" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\077\uffed\100\uffed\001\002\000\004\102" +
    "\200\001\002\000\024\002\000\045\026\051\015\052\007" +
    "\053\004\054\016\055\022\056\021\077\020\001\002\000" +
    "\032\002\uffe6\045\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\053\uffe6\054\uffe6\055\uffe6\056\uffe6\077\uffe6\100\uffe6\001" +
    "\002\000\032\002\uffe7\045\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\077\uffe7\100" +
    "\uffe7\001\002\000\032\002\uffe8\045\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\077" +
    "\uffe8\100\uffe8\001\002\000\032\002\uffea\045\uffea\047\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056" +
    "\uffea\077\uffea\100\uffea\001\002\000\004\102\154\001\002" +
    "\000\004\076\153\001\002\000\032\002\uffee\045\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\056\uffee\077\uffee\100\uffee\001\002\000\024\045\026\051" +
    "\015\052\007\053\004\054\016\055\022\056\021\077\020" +
    "\100\150\001\002\000\030\007\034\016\037\060\032\066" +
    "\045\067\041\070\044\071\033\072\040\073\042\074\043" +
    "\102\050\001\002\000\004\076\144\001\002\000\032\002" +
    "\uffe9\045\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\077\uffe9\100\uffe9\001\002\000" +
    "\032\002\uffec\045\uffec\047\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\055\uffec\056\uffec\077\uffec\100\uffec\001" +
    "\002\000\032\002\uffeb\045\uffeb\047\uffeb\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\077\uffeb\100" +
    "\uffeb\001\002\000\004\102\031\001\002\000\004\002\030" +
    "\001\002\000\004\002\001\001\002\000\030\007\034\016" +
    "\037\060\032\066\045\067\041\070\044\071\033\072\040" +
    "\073\042\074\043\102\050\001\002\000\004\102\141\001" +
    "\002\000\012\011\127\012\132\075\126\104\131\001\002" +
    "\000\030\007\034\016\037\060\032\066\045\067\041\070" +
    "\044\071\033\072\040\073\042\074\043\102\050\001\002" +
    "\000\050\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\076\uffe2\103\uffe2\105\uffe2\106\uffe2\107" +
    "\uffe2\001\002\000\050\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\013\uffdf\014\uffdf\015\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\076\uffdf\103\uffdf\105\uffdf" +
    "\106\uffdf\107\uffdf\001\002\000\030\007\034\016\037\060" +
    "\032\066\045\067\041\070\044\071\033\072\040\073\042" +
    "\074\043\102\050\001\002\000\050\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\013\uffb3\014\uffb3\015\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\076\uffb3\103" +
    "\uffb3\105\uffb3\106\uffb3\107\uffb3\001\002\000\054\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\122\012\123\013" +
    "\uffb6\014\uffb6\015\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\076\uffb6\103\uffb6\105\uffb6\106\uffb6\107" +
    "\uffb6\001\002\000\050\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\013\uffb7\014\uffb7\015\uffb7\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\076\uffb7\103\uffb7\105\uffb7" +
    "\106\uffb7\107\uffb7\001\002\000\050\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\013\uffb8\014\uffb8\015\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\076\uffb8\103" +
    "\uffb8\105\uffb8\106\uffb8\107\uffb8\001\002\000\054\004\uffb5" +
    "\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\120\012\121\013" +
    "\uffb5\014\uffb5\015\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\024\uffb5\025\uffb5\076\uffb5\103\uffb5\105\uffb5\106\uffb5\107" +
    "\uffb5\001\002\000\054\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\011\116\012\117\013\uffb4\014\uffb4\015\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\076\uffb4" +
    "\103\uffb4\105\uffb4\106\uffb4\107\uffb4\001\002\000\050\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\076\uffe1\103\uffe1\105\uffe1\106\uffe1\107\uffe1\001\002" +
    "\000\054\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\013" +
    "\uffba\014\uffba\015\uffba\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\075\105\076\uffba\102\106\103\uffba\105" +
    "\uffba\106\uffba\107\uffba\001\002\000\030\007\034\016\037" +
    "\060\032\066\045\067\041\070\044\071\033\072\040\073" +
    "\042\074\043\102\050\001\002\000\050\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\013\uffe0\014\uffe0\015\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\076\uffe0" +
    "\103\uffe0\105\uffe0\106\uffe0\107\uffe0\001\002\000\040\004" +
    "\057\005\067\006\071\007\061\010\064\013\055\014\073" +
    "\015\070\020\063\021\074\022\053\023\056\024\060\025" +
    "\054\103\065\001\002\000\030\007\uffd0\016\uffd0\060\uffd0" +
    "\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074" +
    "\uffd0\102\uffd0\001\002\000\030\007\uffcf\016\uffcf\060\uffcf" +
    "\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074" +
    "\uffcf\102\uffcf\001\002\000\030\007\uffd5\016\uffd5\060\uffd5" +
    "\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074" +
    "\uffd5\102\uffd5\001\002\000\030\007\uffd2\016\uffd2\060\uffd2" +
    "\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074" +
    "\uffd2\102\uffd2\001\002\000\030\007\uffd9\016\uffd9\060\uffd9" +
    "\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\074" +
    "\uffd9\102\uffd9\001\002\000\030\007\uffce\016\uffce\060\uffce" +
    "\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074" +
    "\uffce\102\uffce\001\002\000\030\007\uffda\016\uffda\060\uffda" +
    "\066\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074" +
    "\uffda\102\uffda\001\002\000\030\007\034\016\037\060\032" +
    "\066\045\067\041\070\044\071\033\072\040\073\042\074" +
    "\043\102\050\001\002\000\030\007\uffd3\016\uffd3\060\uffd3" +
    "\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\102\uffd3\001\002\000\030\007\uffd8\016\uffd8\060\uffd8" +
    "\066\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074" +
    "\uffd8\102\uffd8\001\002\000\004\077\020\001\002\000\030" +
    "\007\034\016\037\060\032\066\045\067\041\070\044\071" +
    "\033\072\040\073\042\074\043\102\050\001\002\000\030" +
    "\007\uffd7\016\uffd7\060\uffd7\066\uffd7\067\uffd7\070\uffd7\071" +
    "\uffd7\072\uffd7\073\uffd7\074\uffd7\102\uffd7\001\002\000\030" +
    "\007\uffd4\016\uffd4\060\uffd4\066\uffd4\067\uffd4\070\uffd4\071" +
    "\uffd4\072\uffd4\073\uffd4\074\uffd4\102\uffd4\001\002\000\030" +
    "\007\uffdb\016\uffdb\060\uffdb\066\uffdb\067\uffdb\070\uffdb\071" +
    "\uffdb\072\uffdb\073\uffdb\074\uffdb\102\uffdb\001\002\000\030" +
    "\007\034\016\037\060\032\066\045\067\041\070\044\071" +
    "\033\072\040\073\042\074\043\102\050\001\002\000\030" +
    "\007\uffd6\016\uffd6\060\uffd6\066\uffd6\067\uffd6\070\uffd6\071" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\102\uffd6\001\002\000\030" +
    "\007\uffd1\016\uffd1\060\uffd1\066\uffd1\067\uffd1\070\uffd1\071" +
    "\uffd1\072\uffd1\073\uffd1\074\uffd1\102\uffd1\001\002\000\050" +
    "\004\057\005\067\006\071\007\061\010\064\013\055\014" +
    "\073\015\070\020\063\021\074\022\053\023\056\024\060" +
    "\025\054\076\uffdc\103\uffdc\105\uffdc\106\uffdc\107\uffdc\001" +
    "\002\000\050\004\057\005\067\006\071\007\061\010\064" +
    "\013\055\014\073\015\070\020\063\021\074\022\053\023" +
    "\056\024\060\025\054\076\uffdd\103\uffdd\105\uffdd\106\uffdd" +
    "\107\uffdd\001\002\000\034\002\ufffe\045\ufffe\046\100\047" +
    "\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe" +
    "\056\ufffe\077\ufffe\100\ufffe\001\002\000\004\077\020\001" +
    "\002\000\032\002\uffff\045\uffff\047\uffff\050\uffff\051\uffff" +
    "\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\077\uffff\100" +
    "\uffff\001\002\000\050\004\057\005\067\006\071\007\061" +
    "\010\064\013\055\014\073\015\070\020\063\021\074\022" +
    "\053\023\056\024\060\025\054\076\uffde\103\uffde\105\uffde" +
    "\106\uffde\107\uffde\001\002\000\040\004\057\005\067\006" +
    "\071\007\061\010\064\013\055\014\073\015\070\020\063" +
    "\021\074\022\053\023\056\024\060\025\054\103\104\001" +
    "\002\000\050\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\013\uffb2\014\uffb2\015\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\076\uffb2\103\uffb2\105\uffb2\106\uffb2" +
    "\107\uffb2\001\002\000\004\071\115\001\002\000\032\007" +
    "\034\016\037\060\032\066\045\067\041\070\044\071\033" +
    "\072\040\073\042\074\043\102\050\103\110\001\002\000" +
    "\006\103\112\106\113\001\002\000\050\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\013\uffbb\014\uffbb\015\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\076\uffbb" +
    "\103\uffbb\105\uffbb\106\uffbb\107\uffbb\001\002\000\042\004" +
    "\057\005\067\006\071\007\061\010\064\013\055\014\073" +
    "\015\070\020\063\021\074\022\053\023\056\024\060\025" +
    "\054\103\uffcd\106\uffcd\001\002\000\050\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\013\uffbc\014\uffbc\015\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\076\uffbc" +
    "\103\uffbc\105\uffbc\106\uffbc\107\uffbc\001\002\000\030\007" +
    "\034\016\037\060\032\066\045\067\041\070\044\071\033" +
    "\072\040\073\042\074\043\102\050\001\002\000\042\004" +
    "\057\005\067\006\071\007\061\010\064\013\055\014\073" +
    "\015\070\020\063\021\074\022\053\023\056\024\060\025" +
    "\054\103\uffcc\106\uffcc\001\002\000\054\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\013\uffca\014\uffca\015\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\075\uffca" +
    "\076\uffca\102\uffca\103\uffca\105\uffca\106\uffca\107\uffca\001" +
    "\002\000\050\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\076\uffc1\103\uffc1\105\uffc1\106\uffc1" +
    "\107\uffc1\001\002\000\050\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\013\uffc5\014\uffc5\015\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\076\uffc5\103\uffc5\105" +
    "\uffc5\106\uffc5\107\uffc5\001\002\000\050\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\013\uffc0\014\uffc0\015\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\076\uffc0" +
    "\103\uffc0\105\uffc0\106\uffc0\107\uffc0\001\002\000\050\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\076\uffc4\103\uffc4\105\uffc4\106\uffc4\107\uffc4\001\002" +
    "\000\050\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\076\uffc2\103\uffc2\105\uffc2\106\uffc2\107" +
    "\uffc2\001\002\000\050\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\013\uffc6\014\uffc6\015\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\076\uffc6\103\uffc6\105\uffc6" +
    "\106\uffc6\107\uffc6\001\002\000\050\004\057\005\067\006" +
    "\071\007\061\010\064\013\uffbe\014\uffbe\015\uffbe\020\063" +
    "\021\074\022\053\023\056\024\060\025\054\076\uffbe\103" +
    "\uffbe\105\uffbe\106\uffbe\107\uffbe\001\002\000\050\004\057" +
    "\005\067\006\uffbf\007\uffbf\010\064\013\uffbf\014\uffbf\015" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\076\uffbf\103\uffbf\105\uffbf\106\uffbf\107\uffbf\001\002\000" +
    "\004\071\140\001\002\000\050\004\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\013\uffc3\014\uffc3\015\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\076\uffc3\103\uffc3" +
    "\105\uffc3\106\uffc3\107\uffc3\001\002\000\052\004\uffb9\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\076" +
    "\uffb9\103\uffb9\104\135\105\uffb9\106\uffb9\107\uffb9\001\002" +
    "\000\030\007\034\016\037\060\032\066\045\067\041\070" +
    "\044\071\033\072\040\073\042\074\043\102\050\001\002" +
    "\000\050\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\076\uffc7\103\uffc7\105\uffc7\106\uffc7\107" +
    "\uffc7\001\002\000\040\004\057\005\067\006\071\007\061" +
    "\010\064\013\055\014\073\015\070\020\063\021\074\022" +
    "\053\023\056\024\060\025\054\105\134\001\002\000\052" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\076\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107" +
    "\uffc9\001\002\000\030\007\034\016\037\060\032\066\045" +
    "\067\041\070\044\071\033\072\040\073\042\074\043\102" +
    "\050\001\002\000\040\004\057\005\067\006\071\007\061" +
    "\010\064\013\055\014\073\015\070\020\063\021\074\022" +
    "\053\023\056\024\060\025\054\105\137\001\002\000\052" +
    "\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\076\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107" +
    "\uffc8\001\002\000\054\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\010\uffcb\013\uffcb\014\uffcb\015\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\075\uffcb\076\uffcb\102\uffcb" +
    "\103\uffcb\105\uffcb\106\uffcb\107\uffcb\001\002\000\030\007" +
    "\034\016\037\060\032\066\045\067\041\070\044\071\033" +
    "\072\040\073\042\074\043\102\050\001\002\000\040\004" +
    "\057\005\067\006\071\007\061\010\064\013\055\014\073" +
    "\015\070\020\063\021\074\022\053\023\056\024\060\025" +
    "\054\103\143\001\002\000\050\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\013\uffbd\014\uffbd\015\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\076\uffbd\103\uffbd" +
    "\105\uffbd\106\uffbd\107\uffbd\001\002\000\032\002\ufff0\045" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\077\ufff0\100\ufff0\001\002\000\040\004" +
    "\057\005\067\006\071\007\061\010\064\013\055\014\073" +
    "\015\070\020\063\021\074\022\053\023\056\024\060\025" +
    "\054\076\146\001\002\000\032\002\uffef\045\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056" +
    "\uffef\077\uffef\100\uffef\001\002\000\024\045\026\051\015" +
    "\052\007\053\004\054\016\055\022\056\021\077\020\100" +
    "\152\001\002\000\034\002\uffe3\045\uffe3\046\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\077\uffe3\100\uffe3\001\002\000\032\002\uffe5\045\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\077\uffe5\100\uffe5\001\002\000\034\002\uffe4" +
    "\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\077\uffe4\100\uffe4\001\002" +
    "\000\032\002\ufff1\045\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\077\ufff1\100\ufff1" +
    "\001\002\000\004\071\155\001\002\000\004\103\156\001" +
    "\002\000\004\077\157\001\002\000\010\047\163\050\164" +
    "\100\160\001\002\000\032\002\ufff8\045\ufff8\047\ufff8\050" +
    "\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\077\ufff8\100\ufff8\001\002\000\004\100\177\001\002\000" +
    "\010\047\163\050\164\100\173\001\002\000\030\007\034" +
    "\016\037\060\032\066\045\067\041\070\044\071\033\072" +
    "\040\073\042\074\043\102\050\001\002\000\004\107\166" +
    "\001\002\000\010\047\ufffb\050\ufffb\100\ufffb\001\002\000" +
    "\022\045\026\051\015\052\007\053\004\054\016\055\022" +
    "\056\021\077\020\001\002\000\024\045\026\051\015\052" +
    "\007\053\004\054\016\055\022\056\021\077\020\100\ufffc" +
    "\001\002\000\040\004\057\005\067\006\071\007\061\010" +
    "\064\013\055\014\073\015\070\020\063\021\074\022\053" +
    "\023\056\024\060\025\054\107\171\001\002\000\022\045" +
    "\026\051\015\052\007\053\004\054\016\055\022\056\021" +
    "\077\020\001\002\000\030\045\026\047\ufffd\050\ufffd\051" +
    "\015\052\007\053\004\054\016\055\022\056\021\077\020" +
    "\100\ufffd\001\002\000\032\002\ufff6\045\ufff6\047\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\077\ufff6\100\ufff6\001\002\000\004\100\176\001\002\000" +
    "\010\047\ufffa\050\ufffa\100\ufffa\001\002\000\032\002\ufff9" +
    "\045\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\077\ufff9\100\ufff9\001\002\000\032" +
    "\002\ufff7\045\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\077\ufff7\100\ufff7\001\002" +
    "\000\030\007\034\016\037\060\032\066\045\067\041\070" +
    "\044\071\033\072\040\073\042\074\043\102\050\001\002" +
    "\000\040\004\057\005\067\006\071\007\061\010\064\013" +
    "\055\014\073\015\070\020\063\021\074\022\053\023\056" +
    "\024\060\025\054\103\202\001\002\000\004\077\020\001" +
    "\002\000\032\002\ufff5\045\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\077\ufff5\100" +
    "\ufff5\001\002\000\004\102\205\001\002\000\030\007\034" +
    "\016\037\060\032\066\045\067\041\070\044\071\033\072" +
    "\040\073\042\074\043\102\050\001\002\000\040\004\057" +
    "\005\067\006\071\007\061\010\064\013\055\014\073\015" +
    "\070\020\063\021\074\022\053\023\056\024\060\025\054" +
    "\103\207\001\002\000\032\002\ufff4\045\ufff4\047\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4" +
    "\077\ufff4\100\ufff4\001\002\000\006\017\211\071\212\001" +
    "\002\000\004\026\223\001\002\000\004\101\213\001\002" +
    "\000\030\007\034\016\037\060\032\066\045\067\041\070" +
    "\044\071\033\072\040\073\042\074\043\102\050\001\002" +
    "\000\040\004\057\005\067\006\071\007\061\010\064\013" +
    "\055\014\073\015\070\020\063\021\074\022\053\023\056" +
    "\024\060\025\054\107\215\001\002\000\030\007\034\016" +
    "\037\060\032\066\045\067\041\070\044\071\033\072\040" +
    "\073\042\074\043\102\050\001\002\000\040\004\057\005" +
    "\067\006\071\007\061\010\064\013\055\014\073\015\070" +
    "\020\063\021\074\022\053\023\056\024\060\025\054\107" +
    "\217\001\002\000\030\007\034\016\037\060\032\066\045" +
    "\067\041\070\044\071\033\072\040\073\042\074\043\102" +
    "\050\001\002\000\040\004\057\005\067\006\071\007\061" +
    "\010\064\013\055\014\073\015\070\020\063\021\074\022" +
    "\053\023\056\024\060\025\054\103\221\001\002\000\004" +
    "\077\020\001\002\000\032\002\ufff2\045\ufff2\047\ufff2\050" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2" +
    "\077\ufff2\100\ufff2\001\002\000\004\071\224\001\002\000" +
    "\004\101\225\001\002\000\030\007\034\016\037\060\032" +
    "\066\045\067\041\070\044\071\033\072\040\073\042\074" +
    "\043\102\050\001\002\000\040\004\057\005\067\006\071" +
    "\007\061\010\064\013\055\014\073\015\070\020\063\021" +
    "\074\022\053\023\056\024\060\025\054\107\227\001\002" +
    "\000\030\007\034\016\037\060\032\066\045\067\041\070" +
    "\044\071\033\072\040\073\042\074\043\102\050\001\002" +
    "\000\040\004\057\005\067\006\071\007\061\010\064\013" +
    "\055\014\073\015\070\020\063\021\074\022\053\023\056" +
    "\024\060\025\054\107\231\001\002\000\030\007\034\016" +
    "\037\060\032\066\045\067\041\070\044\071\033\072\040" +
    "\073\042\074\043\102\050\001\002\000\040\004\057\005" +
    "\067\006\071\007\061\010\064\013\055\014\073\015\070" +
    "\020\063\021\074\022\053\023\056\024\060\025\054\103" +
    "\233\001\002\000\004\077\020\001\002\000\032\002\ufff3" +
    "\045\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054" +
    "\ufff3\055\ufff3\056\ufff3\077\ufff3\100\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\032\002\026\021\007\022\010\023\004\024" +
    "\016\030\005\031\023\032\024\033\013\034\022\035\012" +
    "\036\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\022\150\023\004" +
    "\024\016\030\005\031\023\032\024\033\013\034\022\035" +
    "\012\036\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\021\146\022\010" +
    "\023\004\024\016\030\005\031\023\032\024\033\013\034" +
    "\022\035\012\036\011\001\001\000\016\003\144\004\034" +
    "\005\045\006\050\007\035\015\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\051\004\034\005\045\006\050\007\035\015\046" +
    "\001\001\000\002\001\001\000\004\017\127\001\001\000" +
    "\016\003\124\004\034\005\045\006\050\007\035\015\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\123\004\034\005\045\006\050\007\035\015\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\102\004\034\005" +
    "\045\006\050\007\035\015\046\001\001\000\002\001\001" +
    "\000\010\010\071\011\065\012\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\101\004\034\005\045\006\050\007\035\015\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\076\001\001\000\016\003\075\004\034\005\045\006\050" +
    "\007\035\015\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\074\004\034\005\045" +
    "\006\050\007\035\015\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\071\011\065\012\061\001\001" +
    "\000\010\010\071\011\065\012\061\001\001\000\002\001" +
    "\001\000\004\023\100\001\001\000\002\001\001\000\010" +
    "\010\071\011\065\012\061\001\001\000\010\010\071\011" +
    "\065\012\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\110\004\034\005\045\006\050\007\035\015" +
    "\046\016\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\071\011\065\012\061\001\001\000\002\001" +
    "\001\000\016\003\113\004\034\005\045\006\050\007\035" +
    "\015\046\001\001\000\010\010\071\011\065\012\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\071\011\065\012\061\001\001" +
    "\000\010\010\071\011\065\012\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\132" +
    "\004\034\005\045\006\050\007\035\015\046\001\001\000" +
    "\002\001\001\000\010\010\071\011\065\012\061\001\001" +
    "\000\002\001\001\000\016\003\135\004\034\005\045\006" +
    "\050\007\035\015\046\001\001\000\010\010\071\011\065" +
    "\012\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\141\004\034\005\045\006\050\007\035\015\046" +
    "\001\001\000\010\010\071\011\065\012\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\071\011\065" +
    "\012\061\001\001\000\002\001\001\000\026\022\150\023" +
    "\004\024\016\030\005\031\023\032\024\033\013\034\022" +
    "\035\012\036\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\164\026" +
    "\160\027\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\025\174\026\173\001\001\000\016\003\167\004" +
    "\034\005\045\006\050\007\035\015\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\021\166\022\010\023" +
    "\004\024\016\030\005\031\023\032\024\033\013\034\022" +
    "\035\012\036\011\001\001\000\026\022\150\023\004\024" +
    "\016\030\005\031\023\032\024\033\013\034\022\035\012" +
    "\036\011\001\001\000\010\010\071\011\065\012\061\001" +
    "\001\000\030\021\171\022\010\023\004\024\016\030\005" +
    "\031\023\032\024\033\013\034\022\035\012\036\011\001" +
    "\001\000\026\022\150\023\004\024\016\030\005\031\023" +
    "\032\024\033\013\034\022\035\012\036\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\200\004\034\005" +
    "\045\006\050\007\035\015\046\001\001\000\010\010\071" +
    "\011\065\012\061\001\001\000\004\023\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\205\004\034" +
    "\005\045\006\050\007\035\015\046\001\001\000\010\010" +
    "\071\011\065\012\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\213\004\034\005\045\006\050\007\035\015\046\001\001" +
    "\000\010\010\071\011\065\012\061\001\001\000\016\003" +
    "\215\004\034\005\045\006\050\007\035\015\046\001\001" +
    "\000\010\010\071\011\065\012\061\001\001\000\016\003" +
    "\217\004\034\005\045\006\050\007\035\015\046\001\001" +
    "\000\010\010\071\011\065\012\061\001\001\000\004\023" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\225\004\034\005\045\006\050\007" +
    "\035\015\046\001\001\000\010\010\071\011\065\012\061" +
    "\001\001\000\016\003\227\004\034\005\045\006\050\007" +
    "\035\015\046\001\001\000\010\010\071\011\065\012\061" +
    "\001\001\000\016\003\231\004\034\005\045\006\050\007" +
    "\035\015\046\001\001\000\010\010\071\011\065\012\061" +
    "\001\001\000\004\023\233\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


//Operaciones_Listas operaciones = new Operaciones_Listas();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERANDO ::= abre_par EXPRESION cierra_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERANDO ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERANDO ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERANDO ::= caracter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERANDO ::= decimal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERANDO ::= verdadero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERANDO ::= falso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPERANDO ::= id L_DIMENSIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERANDO ::= L_VAL_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERANDO ::= L_VAL_PUNTOS abre_par cierra_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERANDO ::= L_VAL_PUNTOS abre_par L_EXP cierra_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERANDO ::= columna abre_par EXPRESION cierra_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERANDO ::= not EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERANDO ::= resta EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERANDO ::= caracter menos_menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERANDO ::= numero menos_menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERANDO ::= decimal menos_menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERANDO ::= id menos_menos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERANDO ::= caracter mas_mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERANDO ::= numero mas_mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERANDO ::= decimal mas_mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERANDO ::= id mas_mas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPERANDO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // L_DIMENSIONES ::= L_DIMENSIONES abre_cor EXPRESION cierra_cor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_DIMENSIONES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // L_DIMENSIONES ::= abre_cor EXPRESION cierra_cor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_DIMENSIONES",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // L_VAL_PUNTOS ::= L_VAL_PUNTOS punto id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_VAL_PUNTOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // L_VAL_PUNTOS ::= id punto id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_VAL_PUNTOS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // L_EXP ::= L_EXP coma EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_EXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // L_EXP ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_EXP",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SIMB_RELACIONALES ::= no_igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SIMB_RELACIONALES ::= igual_igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIMB_RELACIONALES ::= mayor_igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIMB_RELACIONALES ::= mayor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SIMB_RELACIONALES ::= menor_igual 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SIMB_RELACIONALES ::= menor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SIMB_LOGICOS ::= xor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_LOGICOS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SIMB_LOGICOS ::= or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_LOGICOS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SIMB_LOGICOS ::= and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_LOGICOS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIMB_ARITMETICOS ::= potencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_ARITMETICOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SIMB_ARITMETICOS ::= division 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_ARITMETICOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SIMB_ARITMETICOS ::= multiplicacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_ARITMETICOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SIMB_ARITMETICOS ::= resta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_ARITMETICOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SIMB_ARITMETICOS ::= suma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMB_ARITMETICOS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LOGICA ::= EXPRESION SIMB_LOGICOS EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RELACIONAL ::= EXPRESION SIMB_RELACIONALES EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARITMETICA ::= EXPRESION SIMB_ARITMETICOS EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= OPERANDO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= LOGICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= RELACIONAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= ARITMETICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPO ::= abre_llave cierra_llave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO ::= abre_llave SENTENCIAS cierra_llave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAS ::= SENTENCIAS SENTENCIA_UNICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS ::= SENTENCIA_UNICA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_UNICA ::= RETORNO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_UNICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_UNICA ::= TERMINAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_UNICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_UNICA ::= CONTINUAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_UNICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_UNICA ::= PARA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_UNICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_UNICA ::= HACER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_UNICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA_UNICA ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_UNICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_UNICA ::= SELECCIONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_UNICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA_UNICA ::= SI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_UNICA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RETORNO ::= retorno EXPRESION interrogacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TERMINAR ::= terminar interrogacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINAR",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTINUAR ::= continuar interrogacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUAR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARA ::= para abre_par id igual EXPRESION dos_puntos EXPRESION dos_puntos EXPRESION cierra_par CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARA ::= para abre_par var entero_t id igual EXPRESION dos_puntos EXPRESION dos_puntos EXPRESION cierra_par CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // HACER ::= CUERPO mientras abre_par EXPRESION cierra_par 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("HACER",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MIENTRAS ::= mientras abre_par EXPRESION cierra_par CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MIENTRAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SELECCIONA ::= seleccion abre_par id cierra_par abre_llave L_CASOS cierra_llave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECCIONA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SELECCIONA ::= seleccion abre_par id cierra_par abre_llave DEFECTO cierra_llave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECCIONA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SELECCIONA ::= seleccion abre_par id cierra_par abre_llave cierra_llave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECCIONA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SELECCIONA ::= seleccion abre_par id cierra_par abre_llave L_CASOS DEFECTO cierra_llave 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SELECCIONA",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L_CASOS ::= L_CASOS CASO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L_CASOS ::= CASO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFECTO ::= defecto dos_puntos SENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFECTO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CASO ::= caso EXPRESION dos_puntos SENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SI ::= si abre_par EXPRESION cierra_par CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SI",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SI ::= si abre_par EXPRESION cierra_par CUERPO sino CUERPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SI",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

